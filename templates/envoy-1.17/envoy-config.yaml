admin:
  access_log_path: /tmp/envoy_admin.log
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 9000
  
static_resources:
  listeners:
  - address:
      socket_address: { address: 0.0.0.0, port_value: 8080 }
  
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:  
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          route_config:
            virtual_hosts:
            - name: default
              domains: "*"
              routes:
              - match: { prefix: / }
                route:
                  cluster: {{.TargetService.Name}}
                
          http_filters:
  
          # evaluate JWT tokens, allow_missing allows API Key also
          - name: envoy.filters.http.jwt_authn
            typed_config: 
              "@type": type.googleapis.com/envoy.config.filter.http.jwt_authn.v2alpha.JwtAuthentication
              providers:
                apigee:
                  issuer: {{.JWTProviderKey}}
                  audiences:
                  - remote-service-client
                  remote_jwks:
                    http_uri:
                    {{- if .RuntimeTLS}}
                      uri: https://{{.RuntimeHost}}{{if ne .RuntimePort "443"}}:{{.RuntimePort}}{{end}}/remote-service/certs
                    {{- else}}
                      uri: http://{{.RuntimeHost}}{{if ne .RuntimePort "80"}}:{{.RuntimePort}}{{end}}/remote-service/certs
                    {{- end}}
                      cluster: apigee-auth-service
                      timeout: 5s
                    cache_duration:
                      seconds: 300
                  payload_in_metadata: {{.JWTProviderKey}}
              rules:
              - match:
                  prefix: /
                requires:
                  requires_any:
                    requirements:
                    - provider_name: apigee
                    - allow_missing: {}
  
          # evaluate Apigee rules
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.ext_authz.v2.ExtAuthz
              grpc_service:
                envoy_grpc:
                  cluster_name: apigee-remote-service-envoy
                timeout: 1s                
              metadata_context_namespaces:
              - envoy.filters.http.jwt_authn
  
          # evaluate RBAC (necessary for Apigee config: reject_unauthorized == false)
          - name: envoy.filters.http.rbac
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.rbac.v2.RBAC
              rules:
                action: ALLOW
                policies:
                  apigee-connector:
                    principals:
                    - any: true
                    permissions:
                    - header: { "name": "X-Apigee-Authorized" }
  
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  
          access_log: 
  
          # collect Apigee analytics
          - name: envoy.access_loggers.http_grpc
            typed_config:
              "@type": type.googleapis.com/envoy.config.accesslog.v2.HttpGrpcAccessLogConfig
              common_config:
                grpc_service:
                  envoy_grpc:
                    cluster_name: apigee-remote-service-envoy
                log_name: apigee-remote-service-envoy
              additional_request_headers_to_log:
              - :authority # default target header
              # context headers
              - x-apigee-accesstoken
              - x-apigee-api
              - x-apigee-apiproducts
              - x-apigee-application
              - x-apigee-clientid
              - x-apigee-developeremail
  
  clusters:
    
  # define cluster for {{.TargetService.Host}} target
  - name: {{.TargetService.Name}}
    connect_timeout: 2s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: {{.TargetService.Name}}
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: "{{.TargetService.Host}}"
                port_value: 443
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        sni: "{{.TargetService.Host}}"
  
  # define cluster for Apigee remote service
  - name: apigee-remote-service-envoy
    type: LOGICAL_DNS
    http2_protocol_options: {}
    load_assignment:
      cluster_name: apigee-remote-service-envoy
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: "{{.AdapterHost}}"
                port_value: 5000
    common_lb_config:
      healthy_panic_threshold:
        value: 50.0
    health_checks:
      - timeout: 1s
        interval: 5s
        interval_jitter: 1s
        no_traffic_interval: 5s
        unhealthy_threshold: 1
        healthy_threshold: 3
        grpc_health_check: {}
    connect_timeout: 0.25s
    {{if .TLS.Dir}}# for custom SSL connection to remote-service
    transport_socket: 
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        common_tls_context:
          tls_certificates: 
          - certificate_chain: {{.TLS.Crt}}
            private_key: {{.TLS.Key}}{{end}}
  
  # define cluster for Apigee JWKS certs
  - name: apigee-auth-service
    connect_timeout: 2s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: apigee-auth-service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: "{{.RuntimeHost}}"
                port_value: "{{.RuntimePort}}"
{{- if .RuntimeTLS}}
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        sni: "{{.RuntimeHost}}"
{{- end}}